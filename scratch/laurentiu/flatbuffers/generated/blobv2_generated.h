// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_BLOBV2_BLOBVERSION2_H_
#define FLATBUFFERS_GENERATED_BLOBV2_BLOBVERSION2_H_

#include "flatbuffers/flatbuffers.h"

namespace BlobVersion2 {

struct BlobV2;
struct BlobV2T;

enum Color {
  Color_NotSet = 0,
  Color_Red = 1,
  Color_Green = 2,
  Color_Blue = 3,
  Color_MIN = Color_NotSet,
  Color_MAX = Color_Blue
};

inline const Color (&EnumValuesColor())[4] {
  static const Color values[] = {
    Color_NotSet,
    Color_Red,
    Color_Green,
    Color_Blue
  };
  return values;
}

inline const char * const *EnumNamesColor() {
  static const char * const names[5] = {
    "NotSet",
    "Red",
    "Green",
    "Blue",
    nullptr
  };
  return names;
}

inline const char *EnumNameColor(Color e) {
  if (e < Color_NotSet || e > Color_Blue) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesColor()[index];
}

struct BlobV2T : public flatbuffers::NativeTable {
  typedef BlobV2 TableType;
  BlobVersion2::Color color;
  int32_t id;
  int16_t year;
  int8_t month;
  int8_t day;
  BlobV2T()
      : color(BlobVersion2::Color_NotSet),
        id(0),
        year(1950),
        month(1),
        day(0) {
  }
};

struct BlobV2 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef BlobV2T NativeTableType;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_COLOR = 4,
    VT_ID = 6,
    VT_YEAR = 10,
    VT_MONTH = 12,
    VT_DAY = 14
  };
  BlobVersion2::Color color() const {
    return static_cast<BlobVersion2::Color>(GetField<int8_t>(VT_COLOR, 0));
  }
  bool mutate_color(BlobVersion2::Color _color) {
    return SetField<int8_t>(VT_COLOR, static_cast<int8_t>(_color), 0);
  }
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  bool mutate_id(int32_t _id) {
    return SetField<int32_t>(VT_ID, _id, 0);
  }
  int16_t year() const {
    return GetField<int16_t>(VT_YEAR, 1950);
  }
  bool mutate_year(int16_t _year) {
    return SetField<int16_t>(VT_YEAR, _year, 1950);
  }
  int8_t month() const {
    return GetField<int8_t>(VT_MONTH, 1);
  }
  bool mutate_month(int8_t _month) {
    return SetField<int8_t>(VT_MONTH, _month, 1);
  }
  int8_t day() const {
    return GetField<int8_t>(VT_DAY, 0);
  }
  bool mutate_day(int8_t _day) {
    return SetField<int8_t>(VT_DAY, _day, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_COLOR) &&
           VerifyField<int32_t>(verifier, VT_ID) &&
           VerifyField<int16_t>(verifier, VT_YEAR) &&
           VerifyField<int8_t>(verifier, VT_MONTH) &&
           VerifyField<int8_t>(verifier, VT_DAY) &&
           verifier.EndTable();
  }
  BlobV2T *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(BlobV2T *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<BlobV2> Pack(flatbuffers::FlatBufferBuilder &_fbb, const BlobV2T* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct BlobV2Builder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_color(BlobVersion2::Color color) {
    fbb_.AddElement<int8_t>(BlobV2::VT_COLOR, static_cast<int8_t>(color), 0);
  }
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(BlobV2::VT_ID, id, 0);
  }
  void add_year(int16_t year) {
    fbb_.AddElement<int16_t>(BlobV2::VT_YEAR, year, 1950);
  }
  void add_month(int8_t month) {
    fbb_.AddElement<int8_t>(BlobV2::VT_MONTH, month, 1);
  }
  void add_day(int8_t day) {
    fbb_.AddElement<int8_t>(BlobV2::VT_DAY, day, 0);
  }
  explicit BlobV2Builder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  BlobV2Builder &operator=(const BlobV2Builder &);
  flatbuffers::Offset<BlobV2> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<BlobV2>(end);
    return o;
  }
};

inline flatbuffers::Offset<BlobV2> CreateBlobV2(
    flatbuffers::FlatBufferBuilder &_fbb,
    BlobVersion2::Color color = BlobVersion2::Color_NotSet,
    int32_t id = 0,
    int16_t year = 1950,
    int8_t month = 1,
    int8_t day = 0) {
  BlobV2Builder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_year(year);
  builder_.add_day(day);
  builder_.add_month(month);
  builder_.add_color(color);
  return builder_.Finish();
}

flatbuffers::Offset<BlobV2> CreateBlobV2(flatbuffers::FlatBufferBuilder &_fbb, const BlobV2T *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline BlobV2T *BlobV2::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new BlobV2T();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void BlobV2::UnPackTo(BlobV2T *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = color(); _o->color = _e; }
  { auto _e = id(); _o->id = _e; }
  { auto _e = year(); _o->year = _e; }
  { auto _e = month(); _o->month = _e; }
  { auto _e = day(); _o->day = _e; }
}

inline flatbuffers::Offset<BlobV2> BlobV2::Pack(flatbuffers::FlatBufferBuilder &_fbb, const BlobV2T* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateBlobV2(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<BlobV2> CreateBlobV2(flatbuffers::FlatBufferBuilder &_fbb, const BlobV2T *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const BlobV2T* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _color = _o->color;
  auto _id = _o->id;
  auto _year = _o->year;
  auto _month = _o->month;
  auto _day = _o->day;
  return BlobVersion2::CreateBlobV2(
      _fbb,
      _color,
      _id,
      _year,
      _month,
      _day);
}

inline const BlobVersion2::BlobV2 *GetBlobV2(const void *buf) {
  return flatbuffers::GetRoot<BlobVersion2::BlobV2>(buf);
}

inline const BlobVersion2::BlobV2 *GetSizePrefixedBlobV2(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<BlobVersion2::BlobV2>(buf);
}

inline BlobV2 *GetMutableBlobV2(void *buf) {
  return flatbuffers::GetMutableRoot<BlobV2>(buf);
}

inline bool VerifyBlobV2Buffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<BlobVersion2::BlobV2>(nullptr);
}

inline bool VerifySizePrefixedBlobV2Buffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<BlobVersion2::BlobV2>(nullptr);
}

inline void FinishBlobV2Buffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<BlobVersion2::BlobV2> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedBlobV2Buffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<BlobVersion2::BlobV2> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<BlobVersion2::BlobV2T> UnPackBlobV2(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<BlobVersion2::BlobV2T>(GetBlobV2(buf)->UnPack(res));
}

inline std::unique_ptr<BlobVersion2::BlobV2T> UnPackSizePrefixedBlobV2(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<BlobVersion2::BlobV2T>(GetSizePrefixedBlobV2(buf)->UnPack(res));
}

}  // namespace BlobVersion2

#endif  // FLATBUFFERS_GENERATED_BLOBV2_BLOBVERSION2_H_
