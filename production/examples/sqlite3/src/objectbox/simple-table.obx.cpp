// Code generated by ObjectBox; DO NOT EDIT.

#include "simple-table.obx.hpp"

const obx::Property<simple_table, OBXPropertyType_Long> simple_table_::id(1);
const obx::Property<simple_table, OBXPropertyType_Long> simple_table_::field(2);

void simple_table::_OBX_MetaInfo::toFlatBuffer(flatbuffers::FlatBufferBuilder& fbb, const simple_table& object)
{
    fbb.Clear();
    flatbuffers::uoffset_t fbStart = fbb.StartTable();
    fbb.TrackField(4, fbb.PushElement<obx_id>(object.id));
    fbb.TrackField(6, fbb.PushElement<uint64_t>(object.field));
    flatbuffers::Offset<flatbuffers::Table> offset;
    offset.o = fbb.EndTable(fbStart);
    fbb.Finish(offset);
}

simple_table simple_table::_OBX_MetaInfo::fromFlatBuffer(const void* data, size_t size)
{
    simple_table object;
    fromFlatBuffer(data, size, object);
    return object;
}

std::unique_ptr<simple_table> simple_table::_OBX_MetaInfo::newFromFlatBuffer(const void* data, size_t size)
{
    auto object = std::unique_ptr<simple_table>(new simple_table());
    fromFlatBuffer(data, size, *object);
    return object;
}

void simple_table::_OBX_MetaInfo::fromFlatBuffer(const void* data, size_t, simple_table& outObject)
{
    const auto* table = flatbuffers::GetRoot<flatbuffers::Table>(data);
    assert(table);
    outObject.id = table->GetField<obx_id>(4, 0);
    outObject.field = table->GetField<uint64_t>(6, 0);
}
